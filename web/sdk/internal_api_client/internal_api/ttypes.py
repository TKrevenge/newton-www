#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ErrorCode(object):
    FAIL = 0
    SUCCESS = 1
    UNAUTH = 2

    _VALUES_TO_NAMES = {
        0: "FAIL",
        1: "SUCCESS",
        2: "UNAUTH",
    }

    _NAMES_TO_VALUES = {
        "FAIL": 0,
        "SUCCESS": 1,
        "UNAUTH": 2,
    }


class Priority(object):
    HIGHEST = 9
    HIGH = 7
    MIDDLE = 5
    LOW = 3
    LOWEST = 1

    _VALUES_TO_NAMES = {
        9: "HIGHEST",
        7: "HIGH",
        5: "MIDDLE",
        3: "LOW",
        1: "LOWEST",
    }

    _NAMES_TO_VALUES = {
        "HIGHEST": 9,
        "HIGH": 7,
        "MIDDLE": 5,
        "LOW": 3,
        "LOWEST": 1,
    }


class UpgradeData(object):
    """
    Attributes:
     - id_upgrade_data
     - app_id
     - platform_type
     - version
     - version_code
     - is_force_upgrade
     - is_show
     - message
     - download_url
     - language_code
     - created_at
     - updated_at
     - status
    """


    def __init__(self, id_upgrade_data=None, app_id=None, platform_type=None, version=None, version_code=None, is_force_upgrade=None, is_show=None, message=None, download_url=None, language_code=None, created_at=None, updated_at=None, status=None,):
        self.id_upgrade_data = id_upgrade_data
        self.app_id = app_id
        self.platform_type = platform_type
        self.version = version
        self.version_code = version_code
        self.is_force_upgrade = is_force_upgrade
        self.is_show = is_show
        self.message = message
        self.download_url = download_url
        self.language_code = language_code
        self.created_at = created_at
        self.updated_at = updated_at
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id_upgrade_data = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.app_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.platform_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.version_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_force_upgrade = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.is_show = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.download_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.language_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.created_at = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.updated_at = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpgradeData')
        if self.id_upgrade_data is not None:
            oprot.writeFieldBegin('id_upgrade_data', TType.I32, 1)
            oprot.writeI32(self.id_upgrade_data)
            oprot.writeFieldEnd()
        if self.app_id is not None:
            oprot.writeFieldBegin('app_id', TType.I32, 2)
            oprot.writeI32(self.app_id)
            oprot.writeFieldEnd()
        if self.platform_type is not None:
            oprot.writeFieldBegin('platform_type', TType.I32, 3)
            oprot.writeI32(self.platform_type)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 4)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.version_code is not None:
            oprot.writeFieldBegin('version_code', TType.STRING, 5)
            oprot.writeString(self.version_code.encode('utf-8') if sys.version_info[0] == 2 else self.version_code)
            oprot.writeFieldEnd()
        if self.is_force_upgrade is not None:
            oprot.writeFieldBegin('is_force_upgrade', TType.BOOL, 6)
            oprot.writeBool(self.is_force_upgrade)
            oprot.writeFieldEnd()
        if self.is_show is not None:
            oprot.writeFieldBegin('is_show', TType.BOOL, 7)
            oprot.writeBool(self.is_show)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 8)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.download_url is not None:
            oprot.writeFieldBegin('download_url', TType.STRING, 9)
            oprot.writeString(self.download_url.encode('utf-8') if sys.version_info[0] == 2 else self.download_url)
            oprot.writeFieldEnd()
        if self.language_code is not None:
            oprot.writeFieldBegin('language_code', TType.STRING, 10)
            oprot.writeString(self.language_code.encode('utf-8') if sys.version_info[0] == 2 else self.language_code)
            oprot.writeFieldEnd()
        if self.created_at is not None:
            oprot.writeFieldBegin('created_at', TType.STRING, 11)
            oprot.writeString(self.created_at.encode('utf-8') if sys.version_info[0] == 2 else self.created_at)
            oprot.writeFieldEnd()
        if self.updated_at is not None:
            oprot.writeFieldBegin('updated_at', TType.STRING, 12)
            oprot.writeString(self.updated_at.encode('utf-8') if sys.version_info[0] == 2 else self.updated_at)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 13)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpgradeInformation(object):
    """
    Attributes:
     - error_code
     - num_pages
     - upgrade_data
    """


    def __init__(self, error_code=None, num_pages=None, upgrade_data=None,):
        self.error_code = error_code
        self.num_pages = num_pages
        self.upgrade_data = upgrade_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.error_code = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.num_pages = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.upgrade_data = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = UpgradeData()
                        _elem5.read(iprot)
                        self.upgrade_data.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpgradeInformation')
        if self.error_code is not None:
            oprot.writeFieldBegin('error_code', TType.I64, 1)
            oprot.writeI64(self.error_code)
            oprot.writeFieldEnd()
        if self.num_pages is not None:
            oprot.writeFieldBegin('num_pages', TType.I32, 2)
            oprot.writeI32(self.num_pages)
            oprot.writeFieldEnd()
        if self.upgrade_data is not None:
            oprot.writeFieldBegin('upgrade_data', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.upgrade_data))
            for iter6 in self.upgrade_data:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(UpgradeData)
UpgradeData.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id_upgrade_data', None, None, ),  # 1
    (2, TType.I32, 'app_id', None, None, ),  # 2
    (3, TType.I32, 'platform_type', None, None, ),  # 3
    (4, TType.STRING, 'version', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'version_code', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'is_force_upgrade', None, None, ),  # 6
    (7, TType.BOOL, 'is_show', None, None, ),  # 7
    (8, TType.STRING, 'message', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'download_url', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'language_code', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'created_at', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'updated_at', 'UTF8', None, ),  # 12
    (13, TType.I32, 'status', None, None, ),  # 13
)
all_structs.append(UpgradeInformation)
UpgradeInformation.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'error_code', None, None, ),  # 1
    (2, TType.I32, 'num_pages', None, None, ),  # 2
    (3, TType.LIST, 'upgrade_data', (TType.STRUCT, [UpgradeData, None], False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
