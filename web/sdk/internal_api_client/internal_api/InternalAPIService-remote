#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from internal_api import InternalAPIService
from internal_api.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool send_sms(string country_code, string cellphone, string content, string queue, Priority priority)')
    print('  bool send_email(string subject, string content, string from_email,  to_emails, string content_type, string queue, Priority priority)')
    print('  bool web_push(string head, string body, string icon, string url, string group, i64 ttl)')
    print('  bool web_push_v1(string head, string body, string icon, string url, string group, i64 ttl, string queue, Priority priority)')
    print('  bool app_push(string data, string queue, Priority priority)')
    print('  bool create_app_push_information(string address, bool active, string push_service_type, i64 wallet_type, string registration_id, string application_id, string language)')
    print('  bool update_app_push_information(string address, string push_service_type, string application_id, string old_registration_id, string new_registration_id)')
    print('  bool delete_app_push_information(string address, string push_service_type, string registration_id, string application_id)')
    print('  bool add_upgrade_data(i32 app_id, i32 platform_type, string version, string version_code, bool is_force_upgrade, bool is_show, string message, string download_url, string language_code, i32 status)')
    print('  UpgradeInformation query_upgrade_data(i32 platform_type, i32 page_id)')
    print('  bool del_upgrade_data(i32 id_upgrade_data)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = InternalAPIService.Client(protocol)
transport.open()

if cmd == 'send_sms':
    if len(args) != 5:
        print('send_sms requires 5 args')
        sys.exit(1)
    pp.pprint(client.send_sms(args[0], args[1], args[2], args[3], eval(args[4]),))

elif cmd == 'send_email':
    if len(args) != 7:
        print('send_email requires 7 args')
        sys.exit(1)
    pp.pprint(client.send_email(args[0], args[1], args[2], eval(args[3]), args[4], args[5], eval(args[6]),))

elif cmd == 'web_push':
    if len(args) != 6:
        print('web_push requires 6 args')
        sys.exit(1)
    pp.pprint(client.web_push(args[0], args[1], args[2], args[3], args[4], eval(args[5]),))

elif cmd == 'web_push_v1':
    if len(args) != 8:
        print('web_push_v1 requires 8 args')
        sys.exit(1)
    pp.pprint(client.web_push_v1(args[0], args[1], args[2], args[3], args[4], eval(args[5]), args[6], eval(args[7]),))

elif cmd == 'app_push':
    if len(args) != 3:
        print('app_push requires 3 args')
        sys.exit(1)
    pp.pprint(client.app_push(args[0], args[1], eval(args[2]),))

elif cmd == 'create_app_push_information':
    if len(args) != 7:
        print('create_app_push_information requires 7 args')
        sys.exit(1)
    pp.pprint(client.create_app_push_information(args[0], eval(args[1]), args[2], eval(args[3]), args[4], args[5], args[6],))

elif cmd == 'update_app_push_information':
    if len(args) != 5:
        print('update_app_push_information requires 5 args')
        sys.exit(1)
    pp.pprint(client.update_app_push_information(args[0], args[1], args[2], args[3], args[4],))

elif cmd == 'delete_app_push_information':
    if len(args) != 4:
        print('delete_app_push_information requires 4 args')
        sys.exit(1)
    pp.pprint(client.delete_app_push_information(args[0], args[1], args[2], args[3],))

elif cmd == 'add_upgrade_data':
    if len(args) != 10:
        print('add_upgrade_data requires 10 args')
        sys.exit(1)
    pp.pprint(client.add_upgrade_data(eval(args[0]), eval(args[1]), args[2], args[3], eval(args[4]), eval(args[5]), args[6], args[7], args[8], eval(args[9]),))

elif cmd == 'query_upgrade_data':
    if len(args) != 2:
        print('query_upgrade_data requires 2 args')
        sys.exit(1)
    pp.pprint(client.query_upgrade_data(eval(args[0]), eval(args[1]),))

elif cmd == 'del_upgrade_data':
    if len(args) != 1:
        print('del_upgrade_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_upgrade_data(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
