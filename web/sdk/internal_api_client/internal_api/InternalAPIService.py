#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def send_sms(self, country_code, cellphone, content, queue, priority):
        """
        Parameters:
         - country_code
         - cellphone
         - content
         - queue
         - priority
        """
        pass

    def send_email(self, subject, content, from_email, to_emails, content_type, queue, priority):
        """
        Parameters:
         - subject
         - content
         - from_email
         - to_emails
         - content_type
         - queue
         - priority
        """
        pass

    def web_push(self, head, body, icon, url, group, ttl):
        """
        Parameters:
         - head
         - body
         - icon
         - url
         - group
         - ttl
        """
        pass

    def web_push_v1(self, head, body, icon, url, group, ttl, queue, priority):
        """
        Parameters:
         - head
         - body
         - icon
         - url
         - group
         - ttl
         - queue
         - priority
        """
        pass

    def app_push(self, data, queue, priority):
        """
        Parameters:
         - data
         - queue
         - priority
        """
        pass

    def create_app_push_information(self, address, active, push_service_type, wallet_type, registration_id, application_id, language):
        """
        Parameters:
         - address
         - active
         - push_service_type
         - wallet_type
         - registration_id
         - application_id
         - language
        """
        pass

    def update_app_push_information(self, address, push_service_type, application_id, old_registration_id, new_registration_id):
        """
        Parameters:
         - address
         - push_service_type
         - application_id
         - old_registration_id
         - new_registration_id
        """
        pass

    def delete_app_push_information(self, address, push_service_type, registration_id, application_id):
        """
        Parameters:
         - address
         - push_service_type
         - registration_id
         - application_id
        """
        pass

    def add_upgrade_data(self, app_id, platform_type, version, version_code, is_force_upgrade, is_show, message, download_url, language_code, status):
        """
        Parameters:
         - app_id
         - platform_type
         - version
         - version_code
         - is_force_upgrade
         - is_show
         - message
         - download_url
         - language_code
         - status
        """
        pass

    def query_upgrade_data(self, platform_type, page_id):
        """
        Parameters:
         - platform_type
         - page_id
        """
        pass

    def del_upgrade_data(self, id_upgrade_data):
        """
        Parameters:
         - id_upgrade_data
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def send_sms(self, country_code, cellphone, content, queue, priority):
        """
        Parameters:
         - country_code
         - cellphone
         - content
         - queue
         - priority
        """
        self.send_send_sms(country_code, cellphone, content, queue, priority)
        return self.recv_send_sms()

    def send_send_sms(self, country_code, cellphone, content, queue, priority):
        self._oprot.writeMessageBegin('send_sms', TMessageType.CALL, self._seqid)
        args = send_sms_args()
        args.country_code = country_code
        args.cellphone = cellphone
        args.content = content
        args.queue = queue
        args.priority = priority
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_send_sms(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = send_sms_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "send_sms failed: unknown result")

    def send_email(self, subject, content, from_email, to_emails, content_type, queue, priority):
        """
        Parameters:
         - subject
         - content
         - from_email
         - to_emails
         - content_type
         - queue
         - priority
        """
        self.send_send_email(subject, content, from_email, to_emails, content_type, queue, priority)
        return self.recv_send_email()

    def send_send_email(self, subject, content, from_email, to_emails, content_type, queue, priority):
        self._oprot.writeMessageBegin('send_email', TMessageType.CALL, self._seqid)
        args = send_email_args()
        args.subject = subject
        args.content = content
        args.from_email = from_email
        args.to_emails = to_emails
        args.content_type = content_type
        args.queue = queue
        args.priority = priority
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_send_email(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = send_email_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "send_email failed: unknown result")

    def web_push(self, head, body, icon, url, group, ttl):
        """
        Parameters:
         - head
         - body
         - icon
         - url
         - group
         - ttl
        """
        self.send_web_push(head, body, icon, url, group, ttl)
        return self.recv_web_push()

    def send_web_push(self, head, body, icon, url, group, ttl):
        self._oprot.writeMessageBegin('web_push', TMessageType.CALL, self._seqid)
        args = web_push_args()
        args.head = head
        args.body = body
        args.icon = icon
        args.url = url
        args.group = group
        args.ttl = ttl
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_web_push(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = web_push_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "web_push failed: unknown result")

    def web_push_v1(self, head, body, icon, url, group, ttl, queue, priority):
        """
        Parameters:
         - head
         - body
         - icon
         - url
         - group
         - ttl
         - queue
         - priority
        """
        self.send_web_push_v1(head, body, icon, url, group, ttl, queue, priority)
        return self.recv_web_push_v1()

    def send_web_push_v1(self, head, body, icon, url, group, ttl, queue, priority):
        self._oprot.writeMessageBegin('web_push_v1', TMessageType.CALL, self._seqid)
        args = web_push_v1_args()
        args.head = head
        args.body = body
        args.icon = icon
        args.url = url
        args.group = group
        args.ttl = ttl
        args.queue = queue
        args.priority = priority
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_web_push_v1(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = web_push_v1_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "web_push_v1 failed: unknown result")

    def app_push(self, data, queue, priority):
        """
        Parameters:
         - data
         - queue
         - priority
        """
        self.send_app_push(data, queue, priority)
        return self.recv_app_push()

    def send_app_push(self, data, queue, priority):
        self._oprot.writeMessageBegin('app_push', TMessageType.CALL, self._seqid)
        args = app_push_args()
        args.data = data
        args.queue = queue
        args.priority = priority
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_app_push(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = app_push_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "app_push failed: unknown result")

    def create_app_push_information(self, address, active, push_service_type, wallet_type, registration_id, application_id, language):
        """
        Parameters:
         - address
         - active
         - push_service_type
         - wallet_type
         - registration_id
         - application_id
         - language
        """
        self.send_create_app_push_information(address, active, push_service_type, wallet_type, registration_id, application_id, language)
        return self.recv_create_app_push_information()

    def send_create_app_push_information(self, address, active, push_service_type, wallet_type, registration_id, application_id, language):
        self._oprot.writeMessageBegin('create_app_push_information', TMessageType.CALL, self._seqid)
        args = create_app_push_information_args()
        args.address = address
        args.active = active
        args.push_service_type = push_service_type
        args.wallet_type = wallet_type
        args.registration_id = registration_id
        args.application_id = application_id
        args.language = language
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_app_push_information(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_app_push_information_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_app_push_information failed: unknown result")

    def update_app_push_information(self, address, push_service_type, application_id, old_registration_id, new_registration_id):
        """
        Parameters:
         - address
         - push_service_type
         - application_id
         - old_registration_id
         - new_registration_id
        """
        self.send_update_app_push_information(address, push_service_type, application_id, old_registration_id, new_registration_id)
        return self.recv_update_app_push_information()

    def send_update_app_push_information(self, address, push_service_type, application_id, old_registration_id, new_registration_id):
        self._oprot.writeMessageBegin('update_app_push_information', TMessageType.CALL, self._seqid)
        args = update_app_push_information_args()
        args.address = address
        args.push_service_type = push_service_type
        args.application_id = application_id
        args.old_registration_id = old_registration_id
        args.new_registration_id = new_registration_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_app_push_information(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_app_push_information_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_app_push_information failed: unknown result")

    def delete_app_push_information(self, address, push_service_type, registration_id, application_id):
        """
        Parameters:
         - address
         - push_service_type
         - registration_id
         - application_id
        """
        self.send_delete_app_push_information(address, push_service_type, registration_id, application_id)
        return self.recv_delete_app_push_information()

    def send_delete_app_push_information(self, address, push_service_type, registration_id, application_id):
        self._oprot.writeMessageBegin('delete_app_push_information', TMessageType.CALL, self._seqid)
        args = delete_app_push_information_args()
        args.address = address
        args.push_service_type = push_service_type
        args.registration_id = registration_id
        args.application_id = application_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_app_push_information(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_app_push_information_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_app_push_information failed: unknown result")

    def add_upgrade_data(self, app_id, platform_type, version, version_code, is_force_upgrade, is_show, message, download_url, language_code, status):
        """
        Parameters:
         - app_id
         - platform_type
         - version
         - version_code
         - is_force_upgrade
         - is_show
         - message
         - download_url
         - language_code
         - status
        """
        self.send_add_upgrade_data(app_id, platform_type, version, version_code, is_force_upgrade, is_show, message, download_url, language_code, status)
        return self.recv_add_upgrade_data()

    def send_add_upgrade_data(self, app_id, platform_type, version, version_code, is_force_upgrade, is_show, message, download_url, language_code, status):
        self._oprot.writeMessageBegin('add_upgrade_data', TMessageType.CALL, self._seqid)
        args = add_upgrade_data_args()
        args.app_id = app_id
        args.platform_type = platform_type
        args.version = version
        args.version_code = version_code
        args.is_force_upgrade = is_force_upgrade
        args.is_show = is_show
        args.message = message
        args.download_url = download_url
        args.language_code = language_code
        args.status = status
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_upgrade_data(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_upgrade_data_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_upgrade_data failed: unknown result")

    def query_upgrade_data(self, platform_type, page_id):
        """
        Parameters:
         - platform_type
         - page_id
        """
        self.send_query_upgrade_data(platform_type, page_id)
        return self.recv_query_upgrade_data()

    def send_query_upgrade_data(self, platform_type, page_id):
        self._oprot.writeMessageBegin('query_upgrade_data', TMessageType.CALL, self._seqid)
        args = query_upgrade_data_args()
        args.platform_type = platform_type
        args.page_id = page_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_query_upgrade_data(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = query_upgrade_data_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "query_upgrade_data failed: unknown result")

    def del_upgrade_data(self, id_upgrade_data):
        """
        Parameters:
         - id_upgrade_data
        """
        self.send_del_upgrade_data(id_upgrade_data)
        return self.recv_del_upgrade_data()

    def send_del_upgrade_data(self, id_upgrade_data):
        self._oprot.writeMessageBegin('del_upgrade_data', TMessageType.CALL, self._seqid)
        args = del_upgrade_data_args()
        args.id_upgrade_data = id_upgrade_data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_del_upgrade_data(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = del_upgrade_data_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "del_upgrade_data failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["send_sms"] = Processor.process_send_sms
        self._processMap["send_email"] = Processor.process_send_email
        self._processMap["web_push"] = Processor.process_web_push
        self._processMap["web_push_v1"] = Processor.process_web_push_v1
        self._processMap["app_push"] = Processor.process_app_push
        self._processMap["create_app_push_information"] = Processor.process_create_app_push_information
        self._processMap["update_app_push_information"] = Processor.process_update_app_push_information
        self._processMap["delete_app_push_information"] = Processor.process_delete_app_push_information
        self._processMap["add_upgrade_data"] = Processor.process_add_upgrade_data
        self._processMap["query_upgrade_data"] = Processor.process_query_upgrade_data
        self._processMap["del_upgrade_data"] = Processor.process_del_upgrade_data

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_send_sms(self, seqid, iprot, oprot):
        args = send_sms_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = send_sms_result()
        try:
            result.success = self._handler.send_sms(args.country_code, args.cellphone, args.content, args.queue, args.priority)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("send_sms", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_send_email(self, seqid, iprot, oprot):
        args = send_email_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = send_email_result()
        try:
            result.success = self._handler.send_email(args.subject, args.content, args.from_email, args.to_emails, args.content_type, args.queue, args.priority)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("send_email", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_web_push(self, seqid, iprot, oprot):
        args = web_push_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = web_push_result()
        try:
            result.success = self._handler.web_push(args.head, args.body, args.icon, args.url, args.group, args.ttl)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("web_push", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_web_push_v1(self, seqid, iprot, oprot):
        args = web_push_v1_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = web_push_v1_result()
        try:
            result.success = self._handler.web_push_v1(args.head, args.body, args.icon, args.url, args.group, args.ttl, args.queue, args.priority)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("web_push_v1", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_app_push(self, seqid, iprot, oprot):
        args = app_push_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = app_push_result()
        try:
            result.success = self._handler.app_push(args.data, args.queue, args.priority)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("app_push", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_app_push_information(self, seqid, iprot, oprot):
        args = create_app_push_information_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_app_push_information_result()
        try:
            result.success = self._handler.create_app_push_information(args.address, args.active, args.push_service_type, args.wallet_type, args.registration_id, args.application_id, args.language)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_app_push_information", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_app_push_information(self, seqid, iprot, oprot):
        args = update_app_push_information_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_app_push_information_result()
        try:
            result.success = self._handler.update_app_push_information(args.address, args.push_service_type, args.application_id, args.old_registration_id, args.new_registration_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_app_push_information", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_app_push_information(self, seqid, iprot, oprot):
        args = delete_app_push_information_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_app_push_information_result()
        try:
            result.success = self._handler.delete_app_push_information(args.address, args.push_service_type, args.registration_id, args.application_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_app_push_information", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_upgrade_data(self, seqid, iprot, oprot):
        args = add_upgrade_data_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_upgrade_data_result()
        try:
            result.success = self._handler.add_upgrade_data(args.app_id, args.platform_type, args.version, args.version_code, args.is_force_upgrade, args.is_show, args.message, args.download_url, args.language_code, args.status)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_upgrade_data", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_query_upgrade_data(self, seqid, iprot, oprot):
        args = query_upgrade_data_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = query_upgrade_data_result()
        try:
            result.success = self._handler.query_upgrade_data(args.platform_type, args.page_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("query_upgrade_data", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_del_upgrade_data(self, seqid, iprot, oprot):
        args = del_upgrade_data_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = del_upgrade_data_result()
        try:
            result.success = self._handler.del_upgrade_data(args.id_upgrade_data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("del_upgrade_data", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class send_sms_args(object):
    """
    Attributes:
     - country_code
     - cellphone
     - content
     - queue
     - priority
    """


    def __init__(self, country_code=None, cellphone=None, content=None, queue=None, priority=None,):
        self.country_code = country_code
        self.cellphone = cellphone
        self.content = content
        self.queue = queue
        self.priority = priority

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.country_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cellphone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.queue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('send_sms_args')
        if self.country_code is not None:
            oprot.writeFieldBegin('country_code', TType.STRING, 1)
            oprot.writeString(self.country_code.encode('utf-8') if sys.version_info[0] == 2 else self.country_code)
            oprot.writeFieldEnd()
        if self.cellphone is not None:
            oprot.writeFieldBegin('cellphone', TType.STRING, 2)
            oprot.writeString(self.cellphone.encode('utf-8') if sys.version_info[0] == 2 else self.cellphone)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 3)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.queue is not None:
            oprot.writeFieldBegin('queue', TType.STRING, 4)
            oprot.writeString(self.queue.encode('utf-8') if sys.version_info[0] == 2 else self.queue)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 5)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(send_sms_args)
send_sms_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'country_code', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'cellphone', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'content', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'queue', 'UTF8', None, ),  # 4
    (5, TType.I32, 'priority', None, None, ),  # 5
)


class send_sms_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('send_sms_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(send_sms_result)
send_sms_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class send_email_args(object):
    """
    Attributes:
     - subject
     - content
     - from_email
     - to_emails
     - content_type
     - queue
     - priority
    """


    def __init__(self, subject=None, content=None, from_email=None, to_emails=None, content_type=None, queue=None, priority=None,):
        self.subject = subject
        self.content = content
        self.from_email = from_email
        self.to_emails = to_emails
        self.content_type = content_type
        self.queue = queue
        self.priority = priority

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.subject = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.from_email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.to_emails = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.to_emails.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.content_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.queue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('send_email_args')
        if self.subject is not None:
            oprot.writeFieldBegin('subject', TType.STRING, 1)
            oprot.writeString(self.subject.encode('utf-8') if sys.version_info[0] == 2 else self.subject)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 2)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.from_email is not None:
            oprot.writeFieldBegin('from_email', TType.STRING, 3)
            oprot.writeString(self.from_email.encode('utf-8') if sys.version_info[0] == 2 else self.from_email)
            oprot.writeFieldEnd()
        if self.to_emails is not None:
            oprot.writeFieldBegin('to_emails', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.to_emails))
            for iter13 in self.to_emails:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.content_type is not None:
            oprot.writeFieldBegin('content_type', TType.STRING, 5)
            oprot.writeString(self.content_type.encode('utf-8') if sys.version_info[0] == 2 else self.content_type)
            oprot.writeFieldEnd()
        if self.queue is not None:
            oprot.writeFieldBegin('queue', TType.STRING, 6)
            oprot.writeString(self.queue.encode('utf-8') if sys.version_info[0] == 2 else self.queue)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 7)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(send_email_args)
send_email_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'subject', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'content', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'from_email', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'to_emails', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'content_type', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'queue', 'UTF8', None, ),  # 6
    (7, TType.I32, 'priority', None, None, ),  # 7
)


class send_email_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('send_email_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(send_email_result)
send_email_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class web_push_args(object):
    """
    Attributes:
     - head
     - body
     - icon
     - url
     - group
     - ttl
    """


    def __init__(self, head=None, body=None, icon=None, url=None, group=None, ttl=None,):
        self.head = head
        self.body = body
        self.icon = icon
        self.url = url
        self.group = group
        self.ttl = ttl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.head = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.ttl = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('web_push_args')
        if self.head is not None:
            oprot.writeFieldBegin('head', TType.STRING, 1)
            oprot.writeString(self.head.encode('utf-8') if sys.version_info[0] == 2 else self.head)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 2)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 3)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 4)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.group is not None:
            oprot.writeFieldBegin('group', TType.STRING, 5)
            oprot.writeString(self.group.encode('utf-8') if sys.version_info[0] == 2 else self.group)
            oprot.writeFieldEnd()
        if self.ttl is not None:
            oprot.writeFieldBegin('ttl', TType.I64, 6)
            oprot.writeI64(self.ttl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(web_push_args)
web_push_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'head', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'body', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'icon', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'url', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'group', 'UTF8', None, ),  # 5
    (6, TType.I64, 'ttl', None, None, ),  # 6
)


class web_push_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('web_push_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(web_push_result)
web_push_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class web_push_v1_args(object):
    """
    Attributes:
     - head
     - body
     - icon
     - url
     - group
     - ttl
     - queue
     - priority
    """


    def __init__(self, head=None, body=None, icon=None, url=None, group=None, ttl=None, queue=None, priority=None,):
        self.head = head
        self.body = body
        self.icon = icon
        self.url = url
        self.group = group
        self.ttl = ttl
        self.queue = queue
        self.priority = priority

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.head = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.body = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.icon = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.group = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.ttl = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.queue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('web_push_v1_args')
        if self.head is not None:
            oprot.writeFieldBegin('head', TType.STRING, 1)
            oprot.writeString(self.head.encode('utf-8') if sys.version_info[0] == 2 else self.head)
            oprot.writeFieldEnd()
        if self.body is not None:
            oprot.writeFieldBegin('body', TType.STRING, 2)
            oprot.writeString(self.body.encode('utf-8') if sys.version_info[0] == 2 else self.body)
            oprot.writeFieldEnd()
        if self.icon is not None:
            oprot.writeFieldBegin('icon', TType.STRING, 3)
            oprot.writeString(self.icon.encode('utf-8') if sys.version_info[0] == 2 else self.icon)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 4)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.group is not None:
            oprot.writeFieldBegin('group', TType.STRING, 5)
            oprot.writeString(self.group.encode('utf-8') if sys.version_info[0] == 2 else self.group)
            oprot.writeFieldEnd()
        if self.ttl is not None:
            oprot.writeFieldBegin('ttl', TType.I64, 6)
            oprot.writeI64(self.ttl)
            oprot.writeFieldEnd()
        if self.queue is not None:
            oprot.writeFieldBegin('queue', TType.STRING, 7)
            oprot.writeString(self.queue.encode('utf-8') if sys.version_info[0] == 2 else self.queue)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 8)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(web_push_v1_args)
web_push_v1_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'head', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'body', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'icon', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'url', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'group', 'UTF8', None, ),  # 5
    (6, TType.I64, 'ttl', None, None, ),  # 6
    (7, TType.STRING, 'queue', 'UTF8', None, ),  # 7
    (8, TType.I32, 'priority', None, None, ),  # 8
)


class web_push_v1_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('web_push_v1_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(web_push_v1_result)
web_push_v1_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class app_push_args(object):
    """
    Attributes:
     - data
     - queue
     - priority
    """


    def __init__(self, data=None, queue=None, priority=None,):
        self.data = data
        self.queue = queue
        self.priority = priority

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.data = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.queue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('app_push_args')
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 1)
            oprot.writeString(self.data.encode('utf-8') if sys.version_info[0] == 2 else self.data)
            oprot.writeFieldEnd()
        if self.queue is not None:
            oprot.writeFieldBegin('queue', TType.STRING, 2)
            oprot.writeString(self.queue.encode('utf-8') if sys.version_info[0] == 2 else self.queue)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 3)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(app_push_args)
app_push_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'data', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'queue', 'UTF8', None, ),  # 2
    (3, TType.I32, 'priority', None, None, ),  # 3
)


class app_push_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('app_push_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(app_push_result)
app_push_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class create_app_push_information_args(object):
    """
    Attributes:
     - address
     - active
     - push_service_type
     - wallet_type
     - registration_id
     - application_id
     - language
    """


    def __init__(self, address=None, active=None, push_service_type=None, wallet_type=None, registration_id=None, application_id=None, language=None,):
        self.address = address
        self.active = active
        self.push_service_type = push_service_type
        self.wallet_type = wallet_type
        self.registration_id = registration_id
        self.application_id = application_id
        self.language = language

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.active = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.push_service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.wallet_type = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.registration_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.application_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.language = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_app_push_information_args')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.active is not None:
            oprot.writeFieldBegin('active', TType.BOOL, 2)
            oprot.writeBool(self.active)
            oprot.writeFieldEnd()
        if self.push_service_type is not None:
            oprot.writeFieldBegin('push_service_type', TType.STRING, 3)
            oprot.writeString(self.push_service_type.encode('utf-8') if sys.version_info[0] == 2 else self.push_service_type)
            oprot.writeFieldEnd()
        if self.wallet_type is not None:
            oprot.writeFieldBegin('wallet_type', TType.I64, 4)
            oprot.writeI64(self.wallet_type)
            oprot.writeFieldEnd()
        if self.registration_id is not None:
            oprot.writeFieldBegin('registration_id', TType.STRING, 5)
            oprot.writeString(self.registration_id.encode('utf-8') if sys.version_info[0] == 2 else self.registration_id)
            oprot.writeFieldEnd()
        if self.application_id is not None:
            oprot.writeFieldBegin('application_id', TType.STRING, 6)
            oprot.writeString(self.application_id.encode('utf-8') if sys.version_info[0] == 2 else self.application_id)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.STRING, 7)
            oprot.writeString(self.language.encode('utf-8') if sys.version_info[0] == 2 else self.language)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_app_push_information_args)
create_app_push_information_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'active', None, None, ),  # 2
    (3, TType.STRING, 'push_service_type', 'UTF8', None, ),  # 3
    (4, TType.I64, 'wallet_type', None, None, ),  # 4
    (5, TType.STRING, 'registration_id', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'application_id', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'language', 'UTF8', None, ),  # 7
)


class create_app_push_information_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_app_push_information_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_app_push_information_result)
create_app_push_information_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class update_app_push_information_args(object):
    """
    Attributes:
     - address
     - push_service_type
     - application_id
     - old_registration_id
     - new_registration_id
    """


    def __init__(self, address=None, push_service_type=None, application_id=None, old_registration_id=None, new_registration_id=None,):
        self.address = address
        self.push_service_type = push_service_type
        self.application_id = application_id
        self.old_registration_id = old_registration_id
        self.new_registration_id = new_registration_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.push_service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.application_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.old_registration_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.new_registration_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_app_push_information_args')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.push_service_type is not None:
            oprot.writeFieldBegin('push_service_type', TType.STRING, 2)
            oprot.writeString(self.push_service_type.encode('utf-8') if sys.version_info[0] == 2 else self.push_service_type)
            oprot.writeFieldEnd()
        if self.application_id is not None:
            oprot.writeFieldBegin('application_id', TType.STRING, 3)
            oprot.writeString(self.application_id.encode('utf-8') if sys.version_info[0] == 2 else self.application_id)
            oprot.writeFieldEnd()
        if self.old_registration_id is not None:
            oprot.writeFieldBegin('old_registration_id', TType.STRING, 4)
            oprot.writeString(self.old_registration_id.encode('utf-8') if sys.version_info[0] == 2 else self.old_registration_id)
            oprot.writeFieldEnd()
        if self.new_registration_id is not None:
            oprot.writeFieldBegin('new_registration_id', TType.STRING, 5)
            oprot.writeString(self.new_registration_id.encode('utf-8') if sys.version_info[0] == 2 else self.new_registration_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_app_push_information_args)
update_app_push_information_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'push_service_type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'application_id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'old_registration_id', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'new_registration_id', 'UTF8', None, ),  # 5
)


class update_app_push_information_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_app_push_information_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_app_push_information_result)
update_app_push_information_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class delete_app_push_information_args(object):
    """
    Attributes:
     - address
     - push_service_type
     - registration_id
     - application_id
    """


    def __init__(self, address=None, push_service_type=None, registration_id=None, application_id=None,):
        self.address = address
        self.push_service_type = push_service_type
        self.registration_id = registration_id
        self.application_id = application_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.push_service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.registration_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.application_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_app_push_information_args')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.push_service_type is not None:
            oprot.writeFieldBegin('push_service_type', TType.STRING, 2)
            oprot.writeString(self.push_service_type.encode('utf-8') if sys.version_info[0] == 2 else self.push_service_type)
            oprot.writeFieldEnd()
        if self.registration_id is not None:
            oprot.writeFieldBegin('registration_id', TType.STRING, 3)
            oprot.writeString(self.registration_id.encode('utf-8') if sys.version_info[0] == 2 else self.registration_id)
            oprot.writeFieldEnd()
        if self.application_id is not None:
            oprot.writeFieldBegin('application_id', TType.STRING, 4)
            oprot.writeString(self.application_id.encode('utf-8') if sys.version_info[0] == 2 else self.application_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_app_push_information_args)
delete_app_push_information_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'push_service_type', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'registration_id', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'application_id', 'UTF8', None, ),  # 4
)


class delete_app_push_information_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_app_push_information_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_app_push_information_result)
delete_app_push_information_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class add_upgrade_data_args(object):
    """
    Attributes:
     - app_id
     - platform_type
     - version
     - version_code
     - is_force_upgrade
     - is_show
     - message
     - download_url
     - language_code
     - status
    """


    def __init__(self, app_id=None, platform_type=None, version=None, version_code=None, is_force_upgrade=None, is_show=None, message=None, download_url=None, language_code=None, status=None,):
        self.app_id = app_id
        self.platform_type = platform_type
        self.version = version
        self.version_code = version_code
        self.is_force_upgrade = is_force_upgrade
        self.is_show = is_show
        self.message = message
        self.download_url = download_url
        self.language_code = language_code
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.app_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.platform_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.version_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.is_force_upgrade = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_show = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.download_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.language_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_upgrade_data_args')
        if self.app_id is not None:
            oprot.writeFieldBegin('app_id', TType.I32, 1)
            oprot.writeI32(self.app_id)
            oprot.writeFieldEnd()
        if self.platform_type is not None:
            oprot.writeFieldBegin('platform_type', TType.I32, 2)
            oprot.writeI32(self.platform_type)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 3)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.version_code is not None:
            oprot.writeFieldBegin('version_code', TType.STRING, 4)
            oprot.writeString(self.version_code.encode('utf-8') if sys.version_info[0] == 2 else self.version_code)
            oprot.writeFieldEnd()
        if self.is_force_upgrade is not None:
            oprot.writeFieldBegin('is_force_upgrade', TType.BOOL, 5)
            oprot.writeBool(self.is_force_upgrade)
            oprot.writeFieldEnd()
        if self.is_show is not None:
            oprot.writeFieldBegin('is_show', TType.BOOL, 6)
            oprot.writeBool(self.is_show)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 7)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.download_url is not None:
            oprot.writeFieldBegin('download_url', TType.STRING, 8)
            oprot.writeString(self.download_url.encode('utf-8') if sys.version_info[0] == 2 else self.download_url)
            oprot.writeFieldEnd()
        if self.language_code is not None:
            oprot.writeFieldBegin('language_code', TType.STRING, 9)
            oprot.writeString(self.language_code.encode('utf-8') if sys.version_info[0] == 2 else self.language_code)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 10)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_upgrade_data_args)
add_upgrade_data_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'app_id', None, None, ),  # 1
    (2, TType.I32, 'platform_type', None, None, ),  # 2
    (3, TType.STRING, 'version', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'version_code', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'is_force_upgrade', None, None, ),  # 5
    (6, TType.BOOL, 'is_show', None, None, ),  # 6
    (7, TType.STRING, 'message', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'download_url', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'language_code', 'UTF8', None, ),  # 9
    (10, TType.I32, 'status', None, None, ),  # 10
)


class add_upgrade_data_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_upgrade_data_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_upgrade_data_result)
add_upgrade_data_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class query_upgrade_data_args(object):
    """
    Attributes:
     - platform_type
     - page_id
    """


    def __init__(self, platform_type=None, page_id=None,):
        self.platform_type = platform_type
        self.page_id = page_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.platform_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.page_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('query_upgrade_data_args')
        if self.platform_type is not None:
            oprot.writeFieldBegin('platform_type', TType.I32, 1)
            oprot.writeI32(self.platform_type)
            oprot.writeFieldEnd()
        if self.page_id is not None:
            oprot.writeFieldBegin('page_id', TType.I32, 2)
            oprot.writeI32(self.page_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(query_upgrade_data_args)
query_upgrade_data_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'platform_type', None, None, ),  # 1
    (2, TType.I32, 'page_id', None, None, ),  # 2
)


class query_upgrade_data_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = UpgradeInformation()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('query_upgrade_data_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(query_upgrade_data_result)
query_upgrade_data_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [UpgradeInformation, None], None, ),  # 0
)


class del_upgrade_data_args(object):
    """
    Attributes:
     - id_upgrade_data
    """


    def __init__(self, id_upgrade_data=None,):
        self.id_upgrade_data = id_upgrade_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id_upgrade_data = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('del_upgrade_data_args')
        if self.id_upgrade_data is not None:
            oprot.writeFieldBegin('id_upgrade_data', TType.I32, 1)
            oprot.writeI32(self.id_upgrade_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(del_upgrade_data_args)
del_upgrade_data_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id_upgrade_data', None, None, ),  # 1
)


class del_upgrade_data_result(object):
    """
    Attributes:
     - success
    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('del_upgrade_data_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(del_upgrade_data_result)
del_upgrade_data_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)
fix_spec(all_structs)
del all_structs

